@model HeaderLinksModel
@inject Nop.Core.IWebHelper webHelper

    <div class="header-links">
        <div class="header-menu">
            @await Component.InvokeAsync("FreemiumMedia_TopMenu")

            <ul>
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeaderLinksBefore })
                @if (Model.ShoppingCartEnabled)
                {
                <li id="topcartlink">
                    <a href="@Url.RouteUrl("ShoppingCart")">
                        <i class="fas fa-shopping-cart"></i>
                        <span class="cart-qty">@T("ShoppingCart.HeaderQuantity", Model.ShoppingCartItems)</span>
                    </a>
                    @await Component.InvokeAsync("FreemiumMedia_FlyoutShoppingCart")
                </li>
                }
                @if (Model.WishlistEnabled)
                {
                    <li>
                        <a href="@Url.RouteUrl("Wishlist")">
                            <i class="far fa-heart"></i>
                            <span class="wishlist-qty">@T("Wishlist.HeaderQuantity", Model.WishlistItems)</span>
                        </a>
                    </li>
                }
                @if (Model.AllowPrivateMessages)
                {
                    <li>
                        <a href="@Url.RouteUrl("PrivateMessages", new { tab = "" })">
                            <i class="fas fa-inbox"></i>
                            <span class="inbox-unread">@Model.UnreadPrivateMessages</span>
                        </a>
                    </li>
                }
                @if (Model.IsAuthenticated)
                {
                    <li><a href="@Url.RouteUrl("CustomerInfo")" class="ico-account">@T("Account.MyAccount")@*@Model.CustomerName*@</a></li>
                    <li><a href="@Url.RouteUrl("Logout")" class="btn btn-login">@T("Account.Logout")</a></li>
                }
                else
                {
                    var returnUrl = webHelper.GetRawUrl(Context.Request);

                    <li><a href="@Url.RouteUrl("Login", new { returnUrl })" class="btn btn-login">@T("Account.Login")</a></li>
                    <li><a href="@Url.RouteUrl("Register", new { returnUrl })" class="btn btn-register">@T("Account.Register")</a></li>
                }
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeaderLinksAfter })
            </ul>
            @if (Model.AllowPrivateMessages && !string.IsNullOrEmpty(Model.AlertMessage))
            {
                //new private message notification
                <script asp-location="Footer">
            $(document).ready(function () {
                displayPopupNotification('@Html.Raw(JavaScriptEncoder.Default.Encode(Model.AlertMessage))', 'success', false);
            });
                </script>
            }
            @if (Model.ShoppingCartEnabled)
            {
                <script asp-location="Footer">
                    $(document).ready(function () {
                        $('.header').on('mouseenter', '#topcartlink', function () {
                            $('#flyout-cart').addClass('active');
                        });
                        $('.header').on('mouseleave', '#topcartlink', function () {
                            $('#flyout-cart').removeClass('active');
                        });
                        $('.header').on('mouseenter', '#flyout-cart', function () {
                            $('#flyout-cart').addClass('active');
                        });
                        $('.header').on('mouseleave', '#flyout-cart', function () {
                            $('#flyout-cart').removeClass('active');
                        });
                    });
                </script>
            }
        </div>

    </div>
